{"version":3,"sources":["components/SearchResult.js","components/Search.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","eachUser","this","props","src","avatar_url","alt","height","width","to","pathname","state","user","login","className","React","Component","SearchPage","fetchUsers","input","currentPage","a","axios","get","res","data","linkHeader","headers","link","parsed","parse","setState","totalCount","total_count","listOfUsers","items","totalPages","Number","last","page","prev","renderSearchResults","console","log","Object","keys","length","map","key","id","handleChange","bind","handleSubmit","evt","target","value","preventDefault","onChange","type","placeholder","onClick","Pagination","count","color","handlePageChange","Profile","userData","location","name","bio","followers","following","href","html_url","App","AppBar","position","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccddb2de.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './SearchResult.css';\n\nexport default class SearchResult extends React.Component {\n  render() {\n    const { eachUser } = this.props;\n\n    return (\n      <div>\n        <img\n          src={eachUser.avatar_url}\n          alt=\"profile avatar\"\n          height=\"45\"\n          width=\"55\"\n        />\n\n        <Link\n          to={{\n            pathname: '/user',\n            state: {\n              user: eachUser.login,\n            },\n          }}\n          className=\"name-text\"\n        >\n          {eachUser.login}\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n/* Axios: HTTP client */\n/* Decided to use axios because I've used it before with React apps and it easily fetches data from APIs. The response is automatically returned in json format which is handy. */\nimport axios from 'axios';\n\n/* Used these libraries for pagination */\nimport * as parse from 'parse-link-header';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport SearchResult from './SearchResult';\n\nexport default class SearchPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      listOfUsers: [],\n      totalCount: 0,\n      totalPages: 0,\n      currentPage: 1,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({ input: evt.target.value });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n\n    const { input, currentPage } = this.state;\n    this.fetchUsers(input, currentPage);\n  }\n\n  handlePageChange(currentPage) {\n    this.setState({ currentPage });\n\n    const { input } = this.state;\n    this.fetchUsers(input, currentPage);\n  }\n\n  fetchUsers = async (input, currentPage) => {\n    try {\n      const res = await axios.get(\n        `https://api.github.com/search/users?q=${input}&per_page=10&page=${currentPage}`\n      );\n\n      const data = res.data;\n      const linkHeader = res.headers.link;\n      const parsed = parse(linkHeader);\n\n      this.setState({\n        totalCount: data.total_count,\n        listOfUsers: data.items,\n        totalPages: Number(parsed.last.page) || Number(parsed.prev.page),\n      });\n      this.renderSearchResults();\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n  };\n\n  renderSearchResults = () => {\n    const { listOfUsers } = this.state;\n\n    if (Object.keys(listOfUsers).length && listOfUsers.length) {\n      return (\n        <div>\n          {listOfUsers.map((eachUser) => {\n            return <SearchResult key={eachUser.id} eachUser={eachUser} />;\n          })}\n        </div>\n      );\n    }\n  };\n\n  render() {\n    const { totalCount, totalPages, currentPage } = this.state;\n\n    return (\n      <div>\n        <div>\n          <form className=\"full-search\">\n            <input\n              id=\"search-bar\"\n              onChange={this.handleChange}\n              type=\"text\"\n              placeholder=\"Search\"\n            />\n            <button\n              id=\"search-button\"\n              onClick={this.handleSubmit}\n              type=\"submit\"\n            >\n              <SearchIcon />\n            </button>\n          </form>\n        </div>\n\n        <p id=\"total-results\">TOTAL RESULTS: {totalCount}</p>\n\n        <div className=\"search-results\">{this.renderSearchResults()}</div>\n\n        <Pagination\n          className=\"pagination\"\n          count={totalPages}\n          color=\"primary\"\n          page={currentPage}\n          onChange={(currentPage) => this.handlePageChange(currentPage)}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport './Profile.css';\n\nexport default class Profile extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userData: {},\n    };\n  }\n\n  async componentDidMount() {\n    const { user } = this.props.location.state;\n\n    try {\n      const res = await axios.get(`https://api.github.com/users/${user}`);\n      this.setState({\n        userData: res.data,\n      });\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n  }\n\n  render() {\n    const { userData } = this.state;\n\n    return (\n      <div>\n        <img src={userData.avatar_url} alt=\"avatar\" height=\"300\" width=\"300\" />\n        <p id=\"profile-text\">Name: {userData.name}</p>\n        <p id=\"profile-text\">\n          About: {userData.bio || 'No information available'}\n        </p>\n        <p id=\"profile-text\">Followers: {userData.followers}</p>\n        <p id=\"profile-text\">Following: {userData.following}</p>\n        <a href={userData.html_url}>GitHub Page</a>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n/* Used this library for navigation */\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\n\nimport SearchPage from './components/Search';\nimport Profile from './components/Profile';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <AppBar color=\"primary\" position=\"sticky\">\n          <div className=\"navbar\">\n            <h1 id=\"title\">GitHub User Search</h1>\n          </div>\n        </AppBar>\n        <div>\n          <Switch>\n            <Route path=\"/user\" component={Profile} />\n            <Route path=\"/\" component={SearchPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}